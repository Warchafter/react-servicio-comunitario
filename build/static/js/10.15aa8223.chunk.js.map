{"version":3,"sources":["components/Notifier/Notifier.js","assets/images/sustainable-building-background.jpg","containers/Auth/Auth.js"],"names":["Notifier","dispatch","useDispatch","notifications","useSelector","store","snackbar","onRemoveSnackbar","useCallback","key","actions","useState","displayed","setDisplayed","useSnackbar","enqueueSnackbar","closeSnackbar","storeDisplayed","id","concat","removeDisplayed","filter","React","useEffect","forEach","message","options","dismissed","includes","onClose","event","reason","myKey","onExited","useStyles","makeStyles","theme","rootLogin","height","image","backgroundImage","backgroundCondominio","backgroundRepeat","backgroundColor","palette","type","grey","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","secondary","main","form","width","marginTop","submit","circularProgress","connect","state","loading","auth","error","isAuthenticated","token","authRedirectPath","onAuth","email","password","onAuthUserSignUp","username","onSetAuthRedirectPath","props","classes","onAuthRememberMe","elementConfig","placeholder","value","validation","required","isEmail","valid","touched","name","minLength","controls","setControls","isSignup","setIsSignup","inputChangedHandler","controlName","updatedControls","updateObject","target","checkValidity","fromElementsArray","push","config","form_fields","map","formElement","TextField","variant","fullWidth","label","onChange","Fragment","FormControlLabel","control","Checkbox","color","checked","className","CircularProgress","to","Grid","container","component","item","xs","sm","md","Paper","elevation","square","Avatar","Typography","onSubmit","preventDefault","resetFormValuesHandler","Button","Link","href","onClick"],"mappings":"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","file":"static/js/10.15aa8223.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst Notifier = () => {\r\n    const dispatch = useDispatch();\r\n    const notifications = useSelector(store => store.snackbar.notifications);\r\n    const onRemoveSnackbar = useCallback((key) => dispatch(actions.removeSnackbar(key)), [dispatch]);\r\n    const [displayed, setDisplayed] = useState([]);\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const storeDisplayed = useCallback((id) => {\r\n        setDisplayed(displayed.concat(id));\r\n    }, [displayed]);\r\n\r\n    const removeDisplayed = useCallback((id) => {\r\n        setDisplayed(displayed.filter(key => id !== key));\r\n    }, [displayed]);\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key);\r\n                return;\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return;\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey);\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    onRemoveSnackbar(myKey);\r\n                    removeDisplayed(myKey);\r\n                },\r\n            });\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key);\r\n        });\r\n    }, [\r\n        notifications,\r\n        closeSnackbar,\r\n        enqueueSnackbar,\r\n        dispatch,\r\n        displayed,\r\n        onRemoveSnackbar,\r\n        removeDisplayed,\r\n        storeDisplayed\r\n    ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Notifier;\r\n","export default __webpack_public_path__ + \"static/media/sustainable-building-background.1dcfc4fe.jpg\";","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    TextField,\r\n    Link,\r\n    Paper,\r\n    Grid,\r\n    Typography,\r\n    CircularProgress,\r\n    FormControlLabel,\r\n    Checkbox\r\n} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\nimport backgroundCondominio from '../../assets/images/sustainable-building-background.jpg'\r\nimport Notifier from '../../components/Notifier/Notifier';\r\nimport { NearMeOutlined } from '@material-ui/icons';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    rootLogin: {\r\n        height: '91vh',\r\n    },\r\n    image: {\r\n        backgroundImage: `url(${backgroundCondominio})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n            theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'left',\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    circularProgress: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    }\r\n}));\r\n\r\n\r\nconst Auth = props => {\r\n    const classes = useStyles();\r\n\r\n    const {\r\n        onAuth,\r\n        onAuthUserSignUp,\r\n        onAuthRememberMe,\r\n        loading,\r\n        isAuthenticated\r\n    } = props;\r\n\r\n    const [controls, setControls] = useState({\r\n        email: {\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: 'Correo Electrónico'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                isEmail: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        name: {\r\n            elementConfig: {\r\n                type: 'name',\r\n                placeholder: 'Nombre de Usuario'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        password: {\r\n            elementConfig: {\r\n                type: 'password',\r\n                placeholder: 'Contraseña'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 5\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n    })\r\n    const [isSignup, setIsSignup] = useState(false);\r\n\r\n    const { authRedirectPath, onSetAuthRedirectPath } = props;\r\n\r\n    useEffect(() => {\r\n        if (authRedirectPath !== '/posts') {\r\n            onSetAuthRedirectPath();\r\n        }\r\n    }, [authRedirectPath, onSetAuthRedirectPath]);\r\n\r\n    const inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(controls, {\r\n            [controlName]: updateObject(controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        setControls(updatedControls);\r\n    };\r\n\r\n    const resetFormValuesHandler = () => {\r\n        const updatedControls = updateObject(controls, {\r\n            email: updateObject(controls.email, {\r\n                value: '',\r\n                valid: false,\r\n                touched: false\r\n            }),\r\n            name: updateObject(controls.name, {\r\n                value: '',\r\n                valid: false,\r\n                touched: false\r\n            }),\r\n            password: updateObject(controls.password, {\r\n                value: '',\r\n                valid: false,\r\n                touched: false\r\n            })\r\n        });\r\n        setControls(updatedControls);\r\n    }\r\n\r\n    const checkBoxChangedHandler = (event) => {\r\n        onAuthRememberMe(event.target.checked);\r\n    }\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        if (!isSignup) {\r\n            onAuth(controls.email.value, controls.password.value);\r\n        } else {\r\n            onAuthUserSignUp(\r\n                controls.email.value,\r\n                controls.name.value,\r\n                controls.password.value\r\n            );\r\n        }\r\n        resetFormValuesHandler();\r\n    }\r\n\r\n    const switchAuthModeHandler = () => {\r\n        setIsSignup(!isSignup);\r\n    }\r\n\r\n    const fromElementsArray = [];\r\n    for (let key in controls) {\r\n        fromElementsArray.push({\r\n            id: key,\r\n            config: controls[key]\r\n        });\r\n    };\r\n\r\n    let form_fields = fromElementsArray.map(formElement => {\r\n        if (isSignup) {\r\n            return (\r\n                <TextField\r\n                    key={formElement.id}\r\n                    variant='outlined'\r\n                    margin='normal'\r\n                    required\r\n                    fullWidth\r\n                    name={formElement.id}\r\n                    label={formElement.config.elementConfig.placeholder}\r\n                    type={formElement.config.elementConfig.type}\r\n                    id={formElement.id}\r\n                    error={!formElement.config.valid && formElement.config.touched}\r\n                    onChange={(event) => inputChangedHandler(event, formElement.id)}\r\n                />\r\n            );\r\n        } else if (['email', 'password'].includes(formElement.id) && !isSignup) {\r\n            return (\r\n                <TextField\r\n                    key={formElement.id}\r\n                    variant='outlined'\r\n                    margin='normal'\r\n                    required\r\n                    fullWidth\r\n                    name={formElement.id}\r\n                    label={formElement.config.elementConfig.placeholder}\r\n                    type={formElement.config.elementConfig.type}\r\n                    id={formElement.id}\r\n                    error={!formElement.config.valid && formElement.config.touched}\r\n                    onChange={(event) => inputChangedHandler(event, formElement.id)}\r\n                />\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    let form = (\r\n        <React.Fragment>\r\n            {form_fields}\r\n            {\r\n                !isSignup ?\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='remember' color='primary' />}\r\n                        label='Remember me'\r\n                        onChange={checkBoxChangedHandler}\r\n                    /> : null\r\n            }\r\n        </React.Fragment>\r\n    )\r\n\r\n    if (loading) {\r\n        form = (\r\n            <div className='circularProgress'>\r\n                <CircularProgress />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (isAuthenticated) {\r\n        return <Redirect to='/posts' />\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Notifier />\r\n            <Grid container component='main' className={classes.rootLogin}>\r\n                <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n                <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n                    <div className={classes.paper}>\r\n                        <Avatar className={classes.avatar}>\r\n                            <LockOutlinedIcon />\r\n                        </Avatar>\r\n                        <Typography component='h1' variant='h5'>\r\n                            {isSignup ? 'Registrar' : 'Iniciar Sesión'}\r\n                        </Typography>\r\n                        <Typography component='h1' variant='h6'>\r\n                            {isSignup ? 'Crear una cuenta' : 'Iniciar sesión en una cuenta'}\r\n                        </Typography>\r\n                        <form className={classes.form} onSubmit={submitHandler}>\r\n                            {form}\r\n                            <Button\r\n                                type='submit'\r\n                                fullWidth\r\n                                variant='contained'\r\n                                color='primary'\r\n                                className={classes.submit}\r\n                            >\r\n                                {isSignup ? 'Registrar' : 'Iniciar Sesión'}\r\n                            </Button>\r\n                            <Grid container>\r\n                                <Grid item>\r\n                                    <Link href='#' variant='body2' onClick={switchAuthModeHandler}>\r\n                                        {isSignup ? '¿Ya tienes una cuenta? Iniciar Sesión' : '¿No tienes una cuenta? Regístrate'}\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password) => dispatch(actions.auth(email, password)),\r\n        onAuthUserSignUp: (email, username, password) => dispatch(actions.authUserSignUp(email, username, password)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/posts'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}