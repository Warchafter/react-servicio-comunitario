{"version":3,"sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","containers/Payment/Payment.js"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","Payment","props","useSelector","state","auth","isAuthenticated","user","userId","token","dispatch","useDispatch","useState","paymentImage","elementType","elementConfig","value","displayValue","name","validation","required","valid","paymentDatePayed","type","placeholder","touched","paymentBank","paymentAmount","minLength","maxLength","isNumeric","paymentConcept","paymentType","paymentForm","setPaymentId","paymentMethod","useEffect","uuidv4","paymentData","fromElementsArray","useCallback","actions","key","id","config","map","formElement","className"],"mappings":"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","file":"static/js/11.618a5acd.chunk.js","sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React, { useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport {\r\n    TextField\r\n} from '@material-ui/core';\r\n\r\nimport * as actions from '../../store/actions/index';\r\nimport { checkValidity, updateObject } from '../../shared/utility';\r\n\r\n//\r\n// paymentImage -\r\n// paymentDatePayed -\r\n// paymentBank -\r\n// paymentAmount -\r\n// paymentConcept-\r\n// paymentType -\r\n// paymentMethod -\r\n// payingUser +\r\n// payingUserId +\r\n// paymentId +\r\n//\r\n\r\nconst Payment = props => {\r\n    // const classes = useStyles();\r\n\r\n    const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\r\n    const user = useSelector(state => state.auth.user);\r\n    const userId = useSelector(state => state.auth.userId);\r\n    const token = useSelector(state => state.auth.token);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [paymentForm, setPaymentForm] = useState({\r\n        paymentImage: {\r\n            elementType: 'file',\r\n            elementConfig: {\r\n                options: [\r\n                    { value: 'Transferencia', displayValue: 'Transferencia' },\r\n                    { value: 'Efectivo', displayValue: 'Efectivo' }\r\n                ]\r\n            },\r\n            name: 'imagen',\r\n            validation: {\r\n                required: true,\r\n            },\r\n            valid: true\r\n        },\r\n        paymentDatePayed: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'date',\r\n                placeholder: 'Fecha del Pago'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        paymentBank: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Banco'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        paymentAmount: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'number',\r\n                placeholder: 'Monto'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 5,\r\n                maxLength: 5,\r\n                isNumeric: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        paymentConcept: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Concepto de Pago'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        paymentType: {\r\n            elementType: 'select',\r\n            elementConfig: {\r\n                options: [\r\n                    { value: 'Bs.', displayValue: 'Bolívares' },\r\n                    { value: 'Dólar', displayValue: 'Dólares' },\r\n                    { value: 'Euro', displayValue: 'Euros' },\r\n                ]\r\n            },\r\n            value: 'Bs.',\r\n            validation: {},\r\n            valid: true\r\n        }\r\n    })\r\n    const [formIsValid, setFormIsValid] = useState(false);\r\n    const [paymentId, setPaymentId] = useState(\"\");\r\n    const [paymentMethod, setPaymentMethod] = useState(true);\r\n\r\n    const inputChangedHandler = (event, paymentFormName) => {\r\n        const updatedPaymentForm = updateObject(paymentForm, {\r\n            [paymentFormName]: updateObject(paymentForm, {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, paymentForm[paymentFormName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        setPaymentForm(updatedPaymentForm);\r\n    };\r\n\r\n    const resetPaymentFormValuesHandler = () => {\r\n        const updatedPaymentForm = updateObject(paymentForm, {\r\n            paymentImage: updateObject(paymentForm.paymentImage, {\r\n                value: '',\r\n                valid: false,\r\n                touched: false\r\n            }),\r\n            paymentDatePayed: updateObject(paymentForm.paymentDatePayed, {\r\n                value: '',\r\n                valid: false,\r\n                touched: false\r\n            }),\r\n            paymentBank: updateObject(paymentForm.paymentBank, {\r\n                value: '',\r\n                valid: false,\r\n                touched: false\r\n            }),\r\n            paymentAmount: updateObject(paymentForm.paymentAmount, {\r\n                value: '',\r\n                valid: false,\r\n                touched: false\r\n            }),\r\n            paymentConcept: updateObject(paymentForm.paymentConcept, {\r\n                value: '',\r\n                valid: false,\r\n                touched: false\r\n            }),\r\n            paymentType: updateObject(paymentForm.paymentType, {\r\n                value: '',\r\n                valid: false,\r\n                touched: false\r\n            })\r\n        });\r\n        setPaymentForm(updatedPaymentForm);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setPaymentId(uuidv4());\r\n    }, []);\r\n\r\n    const createUniquePaymentId = event => {\r\n        let paymentId = uuidv4();\r\n        setPaymentId(paymentId);\r\n    }\r\n\r\n    const [paymentData, setPaymentData] = useState({});\r\n\r\n    const onPublishPost = useCallback((paymentData, token) => dispatch(actions.registerPayment(paymentData, token)), [dispatch, paymentData, token]);\r\n\r\n    const paymentHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for (let formElementIdentifier in paymentForm) {\r\n            formData[formElementIdentifier] = paymentForm[formElementIdentifier].value;\r\n        }\r\n        setPaymentData({\r\n            paymentData: formData,\r\n            paymentUser: user,\r\n            paymentUserId: userId,\r\n            paymentId: paymentId\r\n        })\r\n\r\n        onPublishPost()\r\n    }\r\n\r\n    const fromElementsArray = [];\r\n    for (let key in paymentForm) {\r\n        fromElementsArray.push({\r\n            id: key,\r\n            config: paymentForm[key]\r\n        });\r\n    };\r\n    let form_fields = fromElementsArray.map(formElement => {\r\n        if (paymentMethod) {\r\n            <TextField\r\n                key={formElement.id}\r\n                variant='outlined'\r\n                margin='normal'\r\n                required\r\n                fullWidth\r\n                name={formElement.id}\r\n                label={formElement.config.elementConfig.placeholder}\r\n                type={formElement.config.elementConfig.type}\r\n                id={formElement.id}\r\n                error={!formElement.config.valid && formElement.config.touched}\r\n                onChange={(event) => inputChangedHandler(event, formElement.id)}\r\n            />\r\n        }\r\n    }\r\n\r\n    )\r\n\r\n    return (\r\n        <div className=\"root\">\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Payment;"],"sourceRoot":""}