{"version":3,"sources":["components/Notifier/Notifier.js","components/Posts/PostBuilder/PostBuilder.jsx"],"names":["Notifier","dispatch","useDispatch","notifications","useSelector","store","snackbar","onRemoveSnackbar","useCallback","key","actions","useState","displayed","setDisplayed","useSnackbar","enqueueSnackbar","closeSnackbar","storeDisplayed","id","concat","removeDisplayed","filter","React","useEffect","forEach","message","options","dismissed","includes","onClose","event","reason","myKey","onExited","LinearProgressWithLabel","props","display","alignItems","width","mr","variant","minWidth","color","Math","round","value","useStyles","makeStyles","theme","root","flexGrow","postsContainer","paddingTop","spacing","postTitle","fontWeight","paddingBottom","card","maxWidth","media","height","cardActions","margin","justifyContent","author","paginationContainer","paper","padding","textAlign","palette","text","secondary","resize","fontSize","PostBuilder","classes","image_1","setImage_1","image_2","setImage_2","url_1","setUrl_1","url_2","setUrl_2","progress_1","setProgress_1","progress_2","setProgress_2","isSmall","setIsSmall","setPostTitle","postDescription","setPostDescription","postId","setPostId","user","state","auth","userId","token","currDateFormatted","setCurrDateFormatted","postData","useMemo","postUser","postUserId","postDate","postImgLg","postImgSm","console","log","onPublishPost","uuidv4","handleChange","e","target","files","handleUpload","temp_image","storage","ref","name","put","on","snapshot","progress","bytesTransferred","totalBytes","error","child","getDownloadURL","then","url","Fragment","pt","className","container","item","xs","label","multiline","defaultValue","rowsMax","InputProps","input","rezise","style","onChange","currDate","Date","onInputedTitle","align","ml","component","formatDateCustomFunc","alt","image","title","aria-label","accept","type","onClick","justify","onInputedPostDesc","md","gutterBottom","getFirst40Char","getFirst100Char","firstLetterHandler"],"mappings":"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","file":"static/js/9.f8d2748c.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst Notifier = () => {\r\n    const dispatch = useDispatch();\r\n    const notifications = useSelector(store => store.snackbar.notifications);\r\n    const onRemoveSnackbar = useCallback((key) => dispatch(actions.removeSnackbar(key)), [dispatch]);\r\n    const [displayed, setDisplayed] = useState([]);\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const storeDisplayed = useCallback((id) => {\r\n        setDisplayed(displayed.concat(id));\r\n    }, [displayed]);\r\n\r\n    const removeDisplayed = useCallback((id) => {\r\n        setDisplayed(displayed.filter(key => id !== key));\r\n    }, [displayed]);\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key);\r\n                return;\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return;\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey);\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    onRemoveSnackbar(myKey);\r\n                    removeDisplayed(myKey);\r\n                },\r\n            });\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key);\r\n        });\r\n    }, [\r\n        notifications,\r\n        closeSnackbar,\r\n        enqueueSnackbar,\r\n        dispatch,\r\n        displayed,\r\n        onRemoveSnackbar,\r\n        removeDisplayed,\r\n        storeDisplayed\r\n    ]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Notifier;\r\n","import React, { useState, useCallback, useMemo, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { storage } from '../../../firebase/index';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport {\r\n    Card,\r\n    CardMedia,\r\n    CardContent,\r\n    CardActions,\r\n    CardActionArea,\r\n    Button,\r\n    Avatar,\r\n    Typography,\r\n    Container,\r\n    Grid,\r\n    Box,\r\n    ButtonGroup,\r\n    Paper,\r\n    TextField,\r\n} from '@material-ui/core';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {\r\n    firstLetterHandler,\r\n    formatDateCustomFunc,\r\n    getFirst100Char,\r\n    getFirst40Char\r\n} from '../../../shared/utility';\r\nimport * as actions from '../../../store/actions/index';\r\nimport Notifier from '../../Notifier/Notifier';\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n    return (\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n            <Box width=\"100%\" mr={1}>\r\n                <LinearProgress variant=\"determinate\" {...props} />\r\n            </Box>\r\n            <Box minWidth={35}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n                    props.value,\r\n                )}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        flexGrow: 1.\r\n    },\r\n    postsContainer: {\r\n        paddingTop: theme.spacing(3)\r\n    },\r\n    postTitle: {\r\n        fontWeight: 800,\r\n        paddingBottom: theme.spacing(3),\r\n    },\r\n    card: {\r\n        maxWidth: \"100%\"\r\n    },\r\n    media: {\r\n        height: 240\r\n    },\r\n    cardActions: {\r\n        display: \"flex\",\r\n        margin: \"0 10px\",\r\n        justifyContent: \"space-between\"\r\n    },\r\n    author: {\r\n        display: \"flex\"\r\n    },\r\n    paginationContainer: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\"\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    resize: {\r\n        fontSize: 200\r\n    }\r\n}));\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n    /**\r\n     * The value of the progress indicator for the determinate and buffer variants.\r\n     * Value between 0 and 100.\r\n     */\r\n    value: PropTypes.number.isRequired,\r\n};\r\n\r\nconst PostBuilder = () => {\r\n    const classes = useStyles();\r\n    const [image_1, setImage_1] = useState(null);\r\n    const [image_2, setImage_2] = useState(null);\r\n    const [url_1, setUrl_1] = useState(\"\");\r\n    const [url_2, setUrl_2] = useState(\"\");\r\n    const [progress_1, setProgress_1] = useState(0);\r\n    const [progress_2, setProgress_2] = useState(0);\r\n    const [isSmall, setIsSmall] = useState();\r\n    const [postTitle, setPostTitle] = useState();\r\n    const [postDescription, setPostDescription] = useState();\r\n    const [postId, setPostId] = useState();\r\n\r\n    // const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\r\n    const user = useSelector(state => state.auth.user);\r\n    const userId = useSelector(state => state.auth.userId);\r\n    const token = useSelector(state => state.auth.token);\r\n\r\n    const [currDateFormatted, setCurrDateFormatted] = useState(null);\r\n\r\n    let postData = useMemo(() => {\r\n        return {\r\n            postUser: user,\r\n            postUserId: userId,\r\n            postDate: currDateFormatted,\r\n            postImgLg: url_1,\r\n            postImgSm: url_2,\r\n            postTitle: postTitle,\r\n            postDescription: postDescription,\r\n            postId: postId\r\n        }\r\n    }, [user, userId, currDateFormatted, url_1, url_2, postTitle, postDescription, postId]);\r\n\r\n    console.log(postData);\r\n    console.log(token);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onPublishPost = useCallback(() => dispatch(actions.publishPost(postData, token)), [dispatch, postData, token]);\r\n\r\n    // const fileData = useSelector(state => state.imageUp)\r\n\r\n    useEffect(() => {\r\n        setPostId(uuidv4());\r\n    }, []);\r\n\r\n    const handleChange = e => {\r\n        if (e.target.files[0]) {\r\n            (isSmall) ? setImage_2(e.target.files[0]) : setImage_1(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const onInputedTitle = event => {\r\n        setPostTitle(event.target.value);\r\n        let currDate = new Date();\r\n        setCurrDateFormatted(currDate);\r\n    }\r\n\r\n    const onInputedPostDesc = event => {\r\n        setPostDescription(event.target.value);\r\n    }\r\n\r\n    const createUniqueId = event => {\r\n        let postId = uuidv4();\r\n        setPostId(postId);\r\n        console.log(\"[Last apparent postData]: \" + postData);\r\n        onPublishPost();\r\n    }\r\n\r\n    const handleUpload = () => {\r\n        const temp_image = (isSmall) ? image_2 : image_1\r\n        const uploadTask = storage.ref(`images/${temp_image.name}`).put(temp_image);\r\n        uploadTask.on(\r\n            \"state_changed\",\r\n            snapshot => {\r\n                const progress = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                );\r\n                (isSmall) ? setProgress_2(progress) : setProgress_1(progress);\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            },\r\n            () => {\r\n                storage\r\n                    .ref(\"images\")\r\n                    .child(temp_image.name)\r\n                    .getDownloadURL()\r\n                    .then(url => { (isSmall) ? setUrl_2(url) : setUrl_1(url) });\r\n            }\r\n        );\r\n    };\r\n\r\n\r\n    // console.log(\"Post image: \", image_1);\r\n    // console.log(\"Card image: \", image_2);\r\n    // console.log(\"isSmall: \", isSmall)\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Notifier />\r\n            <Container pt={20}>\r\n                <Typography variant=\"h4\" className={classes.postTitle} >\r\n                    Vista Previa de la Publicación\r\n                </Typography>\r\n                <Grid container spacing={3}>\r\n                    <Paper>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                id=\"outlined-multiline-static\"\r\n                                label=\"Título\"\r\n                                multiline\r\n                                defaultValue=\"Ingrese el título de la publicación\"\r\n                                variant=\"outlined\"\r\n                                rowsMax={3}\r\n                                InputProps={{\r\n                                    classes: {\r\n                                        input: classes.rezise\r\n                                    }\r\n                                }}\r\n                                style={{ width: \"200px\" }}\r\n                                onChange={(event) => { onInputedTitle(event) }}\r\n                            />\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n                <Paper >\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={1}>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={10}>\r\n                            <Typography variant=\"h4\" align=\"center\" >\r\n                                {(postTitle) ? postTitle : \"[TÍTULO]\"}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={1}>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <Box ml={2}>\r\n                                <Typography variant=\"subtitle2\" component=\"p\">\r\n                                    Publicado por:\r\n                                        </Typography>\r\n                                <Typography variant=\"subtitle2\" color=\"textSecondary\" component=\"p\">\r\n                                    {(user) ? user : \"*INGRESE SESIÓN PARA MOSTRAR USUARIO*\"}\r\n                                </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <Typography variant=\"subtitle2\" component=\"p\" style={{ textAlign: \"right\" }}>\r\n                                Fecha de publicación:\r\n                                        </Typography>\r\n                            <Typography variant=\"subtitle2\" color=\"textSecondary\" component=\"p\" style={{ textAlign: \"right\" }}>\r\n                                {formatDateCustomFunc(new Date())}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={8} >\r\n                            <Paper className={classes.paper}>\r\n                                <Card className={classes.card}>\r\n                                    <CardActionArea>\r\n                                        <CardMedia\r\n                                            component=\"img\"\r\n                                            alt=\"Contemplative Reptile\"\r\n                                            image={(url_1) ? url_1 : \"https://firebasestorage.googleapis.com/v0/b/condominio-santa-rita.appspot.com/o/images%2Fplaceholder-image.png?alt=media&token=fbecabf1-07c1-4a43-9b16-8e022730e11d\"}\r\n                                            title=\"Contemplative Reptile\"\r\n                                        />\r\n                                    </CardActionArea>\r\n                                </Card>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={8} >\r\n                            <Typography variant=\"subtitle2\" color=\"textSecondary\" component=\"p\">\r\n                                {(image_1) ? image_1.name : null}\r\n                            </Typography>\r\n                            <LinearProgressWithLabel value={progress_1} />\r\n                            {/* <input type=\"file\" onChange={handleChange} /> */}\r\n                            <ButtonGroup\r\n                                variant=\"text\"\r\n                                color=\"primary\"\r\n                                aria-label=\"text primary button group\"\r\n                            >\r\n                                <Button component='label' label='My Label'\r\n                                >\r\n                                    Seleccionar\r\n                                    <input\r\n                                        accept=\"image/*\"\r\n                                        id=\"raised-button-file\"\r\n                                        type=\"file\"\r\n                                        onClick={(event) => {\r\n                                            setIsSmall(false);\r\n                                            handleChange(event);\r\n                                        }}\r\n                                        style={{ display: 'none' }}\r\n                                    />\r\n                                </Button>\r\n                                <Button\r\n                                    type='submit'\r\n                                    onClick={() => {\r\n                                        setIsSmall(false);\r\n                                        handleUpload();\r\n                                    }}\r\n                                >\r\n                                    Subir\r\n                                </Button>\r\n                            </ButtonGroup>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Grid container justify=\"center\">\r\n                                <TextField\r\n                                    id=\"outlined-multiline-static\"\r\n                                    label=\"Descripción\"\r\n                                    multiline\r\n                                    defaultValue=\"¡Ingrese el texto de la publicación aquí!\"\r\n                                    variant=\"outlined\"\r\n                                    style={{ width: \"100%\" }}\r\n                                    onChange={(event) => onInputedPostDesc(event)}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n\r\n            </Container>\r\n\r\n            <Container maxWidth=\"lg\" className={classes.postsContainer} >\r\n                <Grid container spacing={3}>\r\n                </Grid>\r\n                <Typography variant=\"h4\" className={classes.postTitle} >\r\n                    Vista Previa de la Tarjeta\r\n                        </Typography>\r\n                <Grid container spacing={3}>\r\n                    <Grid item md={4}></Grid>\r\n                    <Grid item md={4} >\r\n                        <Card className={classes.card}>\r\n                            <CardActionArea>\r\n                                <CardMedia\r\n                                    component=\"img\"\r\n                                    alt=\"Contemplative Reptile\"\r\n                                    height=\"140\"\r\n                                    image={(url_2) ? url_2 : \"https://firebasestorage.googleapis.com/v0/b/condominio-santa-rita.appspot.com/o/images%2Fplaceholder-image.png?alt=media&token=fbecabf1-07c1-4a43-9b16-8e022730e11d\"}\r\n                                    title=\"Contemplative Reptile\"\r\n                                />\r\n                                <CardContent>\r\n                                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                        {getFirst40Char(postTitle)}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                        {getFirst100Char(postDescription)}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </CardActionArea>\r\n                            <CardActions className={classes.cardActions}>\r\n                                <Box className={classes.author}>\r\n                                    <Avatar>{firstLetterHandler(user)}</Avatar>\r\n                                    <Box ml={2}>\r\n                                        <Typography variant=\"subtitle2\" component=\"p\">\r\n                                            {user}\r\n                                        </Typography>\r\n                                        <Typography variant=\"subtitle2\" color=\"textSecondary\" component=\"p\">\r\n                                            {formatDateCustomFunc(new Date())}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                </Box>\r\n                            </CardActions>\r\n                        </Card>\r\n                        <Typography variant=\"subtitle2\" color=\"textSecondary\" component=\"p\">\r\n                            {(image_2) ? image_2.name : null}\r\n                        </Typography>\r\n                        <LinearProgressWithLabel value={progress_2} />\r\n                        {/* <input type=\"file\" onChange={handleChange} /> */}\r\n                        <ButtonGroup\r\n                            variant=\"text\"\r\n                            color=\"primary\"\r\n                            aria-label=\"text primary button group\"\r\n                        >\r\n                            <Button component='label' label='My Label'\r\n                            >\r\n                                Seleccionar\r\n                                <input\r\n                                    accept=\"image/*\"\r\n                                    id=\"raised-button-file\"\r\n                                    type=\"file\"\r\n                                    onClick={(event) => {\r\n                                        setIsSmall(true);\r\n                                        handleChange(event);\r\n                                    }}\r\n                                    style={{ display: 'none' }}\r\n                                />\r\n                            </Button>\r\n                            <Button\r\n                                type='submit'\r\n                                onClick={() => {\r\n                                    setIsSmall(true);\r\n                                    handleUpload();\r\n                                }}\r\n                            >\r\n                                Subir\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        <Button component='label' label='My Label' onClick={createUniqueId}>\r\n                            Publicar\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item md={4}></Grid>\r\n                </Grid>\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PostBuilder;"],"sourceRoot":""}